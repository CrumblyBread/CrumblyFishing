[gd_scene load_steps=23 format=3 uid="uid://c7bws67xv4pbs"]

[ext_resource type="Script" path="res://addons/zylann.hterrain/hterrain.gd" id="2_uclxy"]
[ext_resource type="Resource" path="res://Terrain/data.hterrain" id="3_l03a2"]
[ext_resource type="Script" path="res://addons/zylann.hterrain/hterrain_texture_set.gd" id="4_lnote"]
[ext_resource type="Texture2D" uid="uid://c6e06v8132eb" path="res://Terrain/Textures/grass_albedo_height.png" id="5_a5din"]
[ext_resource type="Texture2D" uid="uid://dyd6tim26hrqd" path="res://Terrain/Textures/gravel_albedo_height.png" id="6_aqfvu"]
[ext_resource type="Texture2D" uid="uid://b7yim6mre0t5x" path="res://Terrain/Textures/rock_albedo_height.png" id="7_lcixq"]
[ext_resource type="PackedScene" uid="uid://bhn265s4oo2kv" path="res://Scenes/fishing_rod_Pickup.tscn" id="7_oj50y"]
[ext_resource type="PackedScene" uid="uid://duci7opn6rjmu" path="res://Scenes/beer_bottle_pick_up.tscn" id="8_nffy3"]
[ext_resource type="Script" path="res://Scenes/teleporter.gd" id="9_kvxsa"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_ppvtm"]
sky_top_color = Color(0.321521, 0.670957, 0.777119, 1)
sky_horizon_color = Color(0.656785, 0.734058, 0.740859, 1)
ground_bottom_color = Color(0.305621, 0.265275, 0.186316, 1)
ground_horizon_color = Color(0.656785, 0.734058, 0.740859, 1)

[sub_resource type="Sky" id="Sky_mkuul"]
sky_material = SubResource("ProceduralSkyMaterial_ppvtm")

[sub_resource type="Environment" id="Environment_nw208"]
background_mode = 2
sky = SubResource("Sky_mkuul")
tonemap_mode = 2
glow_enabled = true

[sub_resource type="Resource" id="Resource_80s5r"]
script = ExtResource("4_lnote")
mode = 0
textures = [[ExtResource("5_a5din"), ExtResource("6_aqfvu"), ExtResource("7_lcixq")], [null, null, null]]

[sub_resource type="Shader" id="Shader_eiiwu"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + (TIME * 0.02);
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;
	EMISSION += textureLod(screen_texture, ref_ofs, ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_5qaxh"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_lno1k"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_5qaxh")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_8b2xo"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_5qaxh")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_43atr"]
render_priority = 0
shader = SubResource("Shader_eiiwu")
shader_parameter/albedo = Color(0.431373, 0.45098, 0.356863, 0.784314)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = null
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.05, 0.05, 0.05)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_8b2xo")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_lno1k")

[sub_resource type="BoxMesh" id="BoxMesh_m6orx"]
material = SubResource("ShaderMaterial_43atr")
size = Vector3(256, 1, 256)

[sub_resource type="BoxShape3D" id="BoxShape3D_vx7uo"]
size = Vector3(256, 9.3418, 256)

[sub_resource type="BoxShape3D" id="BoxShape3D_46wlp"]
size = Vector3(1, 1.1477, 1)

[sub_resource type="BoxMesh" id="BoxMesh_bwsya"]

[node name="World" type="Node"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_nw208")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866025, -0.433013, 0.25, 0, 0.5, 0.866025, -0.5, 0.75, -0.433013, 0, 0, 0)
light_color = Color(0.977437, 0.914192, 0.797909, 1)
shadow_enabled = true

[node name="HTerrain" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.779452, 0)
script = ExtResource("2_uclxy")
centered = true
_terrain_data = ExtResource("3_l03a2")
chunk_size = 32
collision_enabled = true
collision_layer = 1
collision_mask = 1
shader_type = "Classic4Lite"
custom_shader = null
custom_globalmap_shader = null
texture_set = SubResource("Resource_80s5r")
render_layers = 1
cast_shadow = 1
shader_params/u_ground_uv_scale = 20
shader_params/u_depth_blending = true
shader_params/u_triplanar = null
shader_params/u_tile_reduction = null

[node name="Water" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 20, 0, 0, 0, 1, 0, -10.279, 0)
mesh = SubResource("BoxMesh_m6orx")

[node name="Teleporter" type="Area3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.75449, 0)
script = ExtResource("9_kvxsa")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Teleporter"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -11.9494, 0)
shape = SubResource("BoxShape3D_vx7uo")

[node name="StaticBody3D" type="StaticBody3D" parent="."]
transform = Transform3D(2.05781, 0, 0, 0, 1, 0, 0, 0, 1, -5.00033, 0.301344, -6.76086)

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.249159, 0)
shape = SubResource("BoxShape3D_46wlp")

[node name="MeshInstance3D" type="MeshInstance3D" parent="StaticBody3D"]
mesh = SubResource("BoxMesh_bwsya")

[node name="MultiplayerSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://Scenes/player.tscn")
spawn_path = NodePath("../Players")
spawn_limit = 10

[node name="Structures" type="Node3D" parent="."]

[node name="BeerBottleStand" type="StaticBody3D" parent="Structures"]
transform = Transform3D(-1.08375, 0.000579263, 0.850081, 9.96233e-05, 2.24363, -0.000273719, -1.74931, -0.000231085, -0.526652, -17.5702, 2.14214, 8.11943)

[node name="CollisionShape3D" type="CollisionShape3D" parent="Structures/BeerBottleStand"]
transform = Transform3D(1, 0, 1.63913e-07, 0, 1, 0, 0, 0, 1, 0, -0.0754259, 0)
shape = SubResource("BoxShape3D_46wlp")

[node name="MeshInstance3D" type="MeshInstance3D" parent="Structures/BeerBottleStand"]
mesh = SubResource("BoxMesh_bwsya")

[node name="FishingRodStand" type="StaticBody3D" parent="Structures"]
transform = Transform3D(0.768804, 0, 0.927589, 0, 2.24363, 0, -1.9088, 0, 0.373603, -20.2034, 2.14214, -1.34213)

[node name="CollisionShape3D" type="CollisionShape3D" parent="Structures/FishingRodStand"]
transform = Transform3D(1, 0, 1.63913e-07, 0, 1, 0, 0, 0, 1, 0, -0.0754259, 0)
shape = SubResource("BoxShape3D_46wlp")

[node name="MeshInstance3D" type="MeshInstance3D" parent="Structures/FishingRodStand"]
mesh = SubResource("BoxMesh_bwsya")

[node name="Players" type="Node3D" parent="."]

[node name="Objects" type="Node3D" parent="."]

[node name="FishingRodPickUp" parent="Objects" instance=ExtResource("7_oj50y")]
transform = Transform3D(-1.10915e-09, -0.999679, 0.0253743, -4.36974e-08, 0.0253743, 0.999679, -1, -2.45038e-15, -4.37114e-08, -3.66227, 0.984697, -6.64091)
durability = 25
id = 1

[node name="BeerBottlePickUp" parent="Objects" instance=ExtResource("8_nffy3")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.32827, 1.13886, -7.12792)
id = 2

[connection signal="body_entered" from="Teleporter" to="Teleporter" method="_on_body_entered"]
